####################################################################################
# MAIN PLANET MACRO
####################################################################################

#define GE_CREATE_PLANET SIDE NAME PLANET_X PLANET_Y TYPE HQ_X HQ_Y COLONISED TOP BOTTOM
[unit]
	side={SIDE}
	canrecruit=no
	type={TYPE}
	name={NAME}
	id={NAME}
	x={PLANET_X}
	y={PLANET_Y}
	role=planet
	unrenamable=yes
	random_traits=no
	#[modifications]
	#	{TRAIT_{PLANET_TRAIT}}
	#[/modifications]
	upkeep=0
	moves=0
	[variables]
		hq_x={HQ_X}
		hq_y={HQ_Y}
		top={TOP}
		bottom={BOTTOM}
		colonised={COLONISED}
		
		spacedock=no
		silo=no
		radar=no
		#missile_base=no
		defence_laser=no
		comms=no
		shields=no
		gaiacology=no

# When beaming down, landing co-ordinates are determined as follows
#	n_x={HQ_X}
#	n_y={HQ_Y}-{RADIUS}
#	ne_x={HQ_X}+{RADIUS}
#	ne_y={TOP}
#	se_x={HQ_X}+{RADIUS}
#	se_y={BOTTOM}
#	south_x={HQ_X}
#	south_y={HQ_Y}+{RADIUS}
#	sw_x={HQ_X}-{RADIUS}
#	sw_y={BOTTOM}
#	nw_x={HQ_X}-{RADIUS}
#	nw_y={TOP}		

		n_x={HQ_X}
		n_y={HQ_Y}
		ne_x={HQ_X}
		ne_y={TOP}
		se_x={HQ_X}
		se_y={BOTTOM}
		s_x={HQ_X}
		s_y={HQ_Y}
		sw_x={HQ_X}
		sw_y={BOTTOM}
		nw_x={HQ_X}
		nw_y={TOP}
	[/variables]
[/unit]

# Once the planet is placed, store it to prod the variables
{BOB_STORE_UNIT (name={NAME}) (x,y={PLANET_X},{PLANET_Y}) (

# Calculating radius
{VARIABLE stored_unit.variables.radius $stored_unit.variables.bottom}
{VARIABLE_OP stored_unit.variables.radius sub $stored_unit.variables.top}

# Setting population limit
#{VARIABLE stored_unit.variables.max_population $stored_unit.variables.radius}
#{VARIABLE_OP stored_unit.variables.max_population multiply $stored_unit.variables.radius}
#{VARIABLE_OP stored_unit.variables.max_population multiply 2}
#{VARIABLE_OP stored_unit.variables.max_population add $stored_unit.variables.radius}
#  Max population: (Available hexes on planet / 2) + radius
# Radius of 1 = 1*1*2+1=3 
# Radius of 2 = 2*2*2+2=10
# Radius of 3 = 3*3*2+3=21
# Radius of 4 = 4*4*2+4=36
# Radius of 5 = 5*5*2+5=55

#[if]
#	{BOB_CONDITION stored_unit.variables.radius numerical_equals 1}
#	[then]
#		
#	[/then]
#[/if]
#[if]
#	{BOB_CONDITION stored_unit.variables.radius numerical_equals 2}
#	[then]
#		{VARIABLE stored_unit.variables.max_population 10}
#	[/then]
#[/if]
#[if]
#	{BOB_CONDITION stored_unit.variables.radius numerical_equals 3}
#	[then]
#		{VARIABLE stored_unit.variables.max_population 15}
#	[/then]
#[/if]


# Setting beaming co-ordinates

# N_Y
{VARIABLE_OP stored_unit.variables.n_y sub $stored_unit.variables.radius}
# NE_Y
{VARIABLE_OP stored_unit.variables.ne_x add $stored_unit.variables.radius}
# SE_X
{VARIABLE_OP stored_unit.variables.se_x add $stored_unit.variables.radius}
# S_Y
{VARIABLE_OP stored_unit.variables.s_y add $stored_unit.variables.radius}
# SW_X
{VARIABLE_OP stored_unit.variables.sw_x sub $stored_unit.variables.radius}
# NW_X
{VARIABLE_OP stored_unit.variables.nw_x sub $stored_unit.variables.radius}

#{SET_LABEL $stored_unit.variables.n_x $stored_unit.variables.n_y "N"}
#{SET_LABEL $stored_unit.variables.ne_x $stored_unit.variables.ne_y "NE"}
#{SET_LABEL $stored_unit.variables.se_x $stored_unit.variables.se_y "SE"}
#{SET_LABEL $stored_unit.variables.s_x $stored_unit.variables.s_y "S"}
#{SET_LABEL $stored_unit.variables.sw_x $stored_unit.variables.sw_y "SW"}
#{SET_LABEL $stored_unit.variables.nw_x $stored_unit.variables.nw_y "NW"}
)}

[capture_village]
	x={HQ_X}
	y={HQ_Y}
	side={SIDE}
[/capture_village]
				
{SET_LABEL {HQ_X} {HQ_Y} {NAME}}

####################################
# TELEPORTING
####################################

[set_menu_item]
	id=Teleport_{NAME}
	description=_ "Teleport To {NAME}"
	image=misc/teleport.png
	[show_if]
		[have_unit]
			role={NAME}
			side=$side_number
			ability=teleporter
			x={HQ_X}
			y={HQ_Y}
		[/have_unit]
		
		[have_unit]
			x,y=$x1,$y1
			side=$side_number
			[filter_wml]
				attacks_left=1
			[/filter_wml]
			[filter_adjacent]
				side=$side_number
				ability=teleporter
				[filter_wml]
					attacks_left=1
				[/filter_wml]
			[/filter_adjacent]
			[not]
				role={NAME}
			[/not]
		[/have_unit]
	[/show_if]
	[command]
		[store_unit]
			[filter]
				role=planet
			[/filter]
			variable=all_planets
		[/store_unit]

		{FOREACH all_planets j}
			[if]
				{BOB_CONDITION all_planets[$j].variables.hq_x numerical_equals {HQ_X}}
				{BOB_CONDITION all_planets[$j].variables.hq_y numerical_equals {HQ_Y}}
				[then]
					[store_locations]
						[and]
							x,y={HQ_X},{HQ_Y}
							radius=$all_planets[$j].variables.radius
						[/and]
						[not]
							[filter]
   							[/filter]
						[/not]
						variable=hexes_without_units
					[/store_locations]

					[if]
						{BOB_CONDITION hexes_without_units.length numerical_not_equals 0}
						[then]
							{SCROLL_TO {HQ_X} {HQ_Y}}
							{PLAY_SOUND teleport.wav}
							{BOB_STORE_UNIT role=$unit.role ability=teleporter ({VARIABLE stored_unit.attacks_left 0})}
							{BOB_STORE_UNIT x=$x1 y=$y1 ({VARIABLE stored_unit.role {NAME}})}
							{GE_TELEPORT x=$x1 y=$y1 {HQ_X} {HQ_Y}}
						[/then]
						[else]
							[message]
								speaker=unit
								side_for=$unit.side
								caption="<span color='{GE_BLUE}'>" + _"Teleporting" + "</span>"
								message= _ "$all_planets[$j].id| is overcrowded! Sorry but I can't teleport to this planet..."
							[/message]
						[/else]
					[/if]

					{CLEAR_VARIABLE hexes_without_units}
				[/then]
			[/if]
		{NEXT j}

		{CLEAR_VARIABLE all_planets}
	[/command]
[/set_menu_item]

#enddef


#########################################################################
# SCROLLING
#########################################################################

#define GE_PLANET_SCROLLING
[set_menu_item]
	id=Scroll_To_Planet
	description=_ "Scroll To Planet"
	image=misc/zoom-out.png
	[show_if]
		[have_unit]
			has_weapon=food
			x,y=$x1,$y1
		[/have_unit]
		[have_unit]
			role=planet
			id=$unit.role
		[/have_unit]
	[/show_if]
	[command]
		{BOB_STORE_UNIT role=planet id=$unit.role ({SCROLL_TO $stored_unit.x $stored_unit.y})}
	[/command]
[/set_menu_item]

# Scroll To Surface

# hq_x={HQ_X}
# hq_y={HQ_Y}

[set_menu_item]
	id=Scroll_To_Surface
	description=_ "Scroll To Surface"
	image=misc/zoom-in.png
	[show_if]
		[have_unit]
			role=planet
			x,y=$x1,$y1
		[/have_unit]
	[/show_if]
	[command]
		{SCROLL_TO $unit.variables.hq_x $unit.variables.hq_y}
	[/command]
[/set_menu_item]
#enddef

####################################################################################
# PLANET IS DESTROYED
####################################################################################

#define GE_PLANET_DEATH
[event]
	name=die
	first_time_only=no
	[filter]
		role=planet
	[/filter]
	# Kill all units on planet
	[kill]
		role=$unit.id
		animate=yes
		fire_event=yes
	[/kill]
	# Remove HQ tile
	{SET_LABEL $unit.variables.hq_x $unit.variables.hq_y (" ")}
	{MODIFY_TERRAIN _off^_usr $unit.variables.hq_x $unit.variables.hq_y}
	# Remove all surface hexes
	[store_locations]
		x=$unit.variables.hq_x
		y=$unit.variables.hq_y
		radius=$unit.variables.radius
		variable=tile
	[/store_locations]
	{FOREACH tile i}
		{MODIFY_TERRAIN _off^_usr $tile[$i].x $tile[$i].y}
	{NEXT i}
	{CLEAR_VARIABLE tile}
	# Turn planet hex into asteroid field
	{MODIFY_TERRAIN Zza^Af $x1 $y1}
	# Replace all orbit hexes with space
	[store_locations]
		x,y=$x1,$y1
		terrain=Zca
		radius=1
		variable=tile
	[/store_locations]
	{FOREACH tile i}
		{MODIFY_TERRAIN Zza $tile[$i].x $tile[$i].y}
	{NEXT i}
	{CLEAR_VARIABLE tile}
[/event]
#enddef

####################################################################################
# PLANETARY TRAITS
####################################################################################

#define GE_PLANET_TRAITS NAME

# Toxic: Poisons any organic unit that moves on the planet

[event]
	name=moveto
	first_time_only=no
	[filter]
		[not]
			race=vehicle
		[/not]
		[not]
			role=ship
		[/not]
	[/filter]
	
	[store_unit]
		[filter]
			id={NAME}
		[/filter]
		variable=toxic_planet
	[/store_unit]
	
	[if]
		{BOB_CONDITION toxic_planet.modifications.trait[0].id equals toxic}
		[then]
			{GE_ALTER_STATUS x=$x1 y=$y1 poisoned on}
		[/then]
	[/if]
	
	[unstore_unit]
		variable=toxic_planet
	[/unstore_unit]
	
	{CLEAR_VARIABLE toxic_planet}
		
[/event]

# Heavy-G: Slows any unit that moves on the planet

[event]
	name=moveto
	first_time_only=no
	[filter]
		role={NAME}
	[/filter]
	
	[store_unit]
		[filter]
			id={NAME}
		[/filter]
		variable=heavyg_planet
	[/store_unit]
	
	[if]
		{BOB_CONDITION heavyg_planet.modifications.trait[0].id equals heavyg}
		[then]
			{GE_ALTER_STATUS x=$x1 y=$y1 slowed on}
		[/then]
	[/if]
	
	[unstore_unit]
		variable=heavyg_planet
	[/unstore_unit]
	
	{CLEAR_VARIABLE heavyg_planet}
		
[/event]

#enddef